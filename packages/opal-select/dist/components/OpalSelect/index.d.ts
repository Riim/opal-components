import { OpalButton } from '@riim/opal-button';
import { OpalTextInput } from '@riim/opal-text-input';
import { Cell, IEvent } from 'cellx';
import { ObservableList } from 'cellx-collections';
import { BaseComponent, IComponentElement, IDisposableListening } from 'rionite';
import { OpalSelectOption } from '../OpalSelectOption';
import './index.css';
export { OpalSelectOption };
export interface IDataListItem {
    [name: string]: any;
}
export declare type TDataList = ObservableList<IDataListItem>;
export declare type TViewModel = ObservableList<IDataListItem>;
export declare class OpalSelect extends BaseComponent {
    static EVENT_BLUR: symbol;
    static EVENT_CHANGE: symbol;
    static EVENT_DESELECT: symbol;
    static EVENT_FOCUS: symbol;
    static EVENT_INPUT: symbol;
    static EVENT_SELECT: symbol;
    static buttonFocusEvents: symbol[];
    static buttonBlurEvents: symbol[];
    static buttonClickEvents: symbol[];
    static menuChangeEvents: symbol[];
    static menuLoadedEvents: symbol[];
    static defaultDataListItemSchema: Readonly<{
        value: string;
        text: string;
        subtext: string;
        disabled: string;
    }>;
    static defaultViewModelItemSchema: Readonly<{
        value: string;
        text: string;
        subtext: string;
        disabled: string;
    }>;
    viewType: typeof OpalButton.prototype.viewType;
    size: typeof OpalButton.prototype.size;
    multiple: boolean;
    clearOnDeselect: boolean;
    paramDataList: TDataList | null;
    dataListKeypath: string | null;
    dataListItemSchema: {
        value?: string;
        text?: string;
        subtext?: string;
        disabled?: string;
    };
    paramValue: Array<string> | null;
    paramViewModel: TViewModel | null;
    viewModelItemSchema: {
        value?: string;
        text?: string;
        subtext?: string;
        disabled?: string;
    };
    addItem: ((text: string, select: OpalSelect) => Promise<Record<string, string>>) | null;
    clearLoadedListOnOpen: boolean;
    text: string | null;
    maxTextLength: number;
    placeholder: string;
    openOnClick: boolean;
    tabIndex: number;
    focused: boolean;
    disabled: boolean;
    dataListCell: Cell<TDataList | null> | null;
    dataList: TDataList | null;
    _dataListItemValueFieldName: string;
    _dataListItemTextFieldName: string;
    _dataListItemSubtextFieldName: string;
    _dataListItemDisabledFieldName: string;
    viewModel: TViewModel;
    _viewModelItemValueFieldName: string;
    _viewModelItemTextFieldName: string;
    _viewModelItemSubtextFieldName: string;
    _viewModelItemDisabledFieldName: string;
    get value(): Array<string>;
    set value(value: Array<string>);
    _addItem: ((text: string, select: OpalSelect) => Promise<Record<string, string>>) | null;
    get _buttonText(): string;
    optionElements: HTMLCollectionOf<IComponentElement<OpalSelectOption>>;
    optionsCell: Cell<Array<OpalSelectOption>> | null;
    get options(): OpalSelectOption[];
    _needOptionsUpdating: boolean;
    _notUpdateOptions: boolean;
    _opened: boolean;
    _valueOnOpen: Array<string>;
    _onceFocusedAfterLoading: boolean;
    _paramDataListSpecified: boolean;
    validator: {
        validate(): boolean;
    } | null;
    _documentClickListening: IDisposableListening | null | undefined;
    _documentFocusListening: IDisposableListening;
    _documentKeyDownListening: IDisposableListening | null | undefined;
    _dataListChangeListeneng: IDisposableListening;
    _menuLoadedListeneng: IDisposableListening;
    initialize(): void;
    ready(): void;
    _initViewModel(): void;
    connected(): void;
    _onParamValueChange(evt: IEvent): void;
    _updateViewModel(value: Array<string>, multiple: boolean): void;
    _onFocusedChange(evt: IEvent): void;
    _onViewModelChange(): void;
    _onButtonFocus(): void;
    _onButtonBlur(): void;
    _onButtonClick(evt: IEvent<OpalButton>): void;
    _onButtonElementMouseDown(): void;
    _onDocumentClick(): void;
    _onMenuOpenedChange(evt: IEvent): boolean;
    _onMenuSelectOptionSelect(evt: IEvent<OpalSelectOption>): boolean;
    _onMenuSelectOptionDeselect(evt: IEvent<OpalSelectOption>): boolean;
    _onMenuTextInputConfirm(evt: IEvent<OpalTextInput>): false | undefined;
    _onMenuButtonClick(evt: IEvent<OpalButton>): false | undefined;
    _addItem$(item: Record<string, string>): void;
    _onMenuChange(): void;
    open(): boolean;
    close(): boolean;
    toggle(value?: boolean): boolean;
    _onDocumentFocus(evt: Event): void;
    _onDocumentKeyDown(evt: KeyboardEvent): void;
    _onDataListChange(evt: IEvent): void;
    _onMenuLoaded(evt: IEvent): void;
    _updateOptions(): void;
    focus(): this;
    blur(): this;
    _focusOptions(): boolean;
    enable(): this;
    disable(): this;
    validate(): boolean;
}
